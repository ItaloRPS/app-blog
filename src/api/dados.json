{
    "data": {
      "setting": {
        "data": {
          "id": "1",
          "attributes": {
            "blogName": "Italo silva ",
            "blogDescription": "myBlog",
            "text": "texto para Footer",
            "createdAt": "2023-01-03T20:04:54.940Z",
            "logo": {
              "data": [
                {
                  "attributes": {
                    "name": "superman-logo-super-homem.png",
                    "alternativeText": "logo",
                    "url": "https://res.cloudinary.com/dbc5pch0s/image/upload/v1673046552/superman_logo_super_homem_39a5abf9f9.png"
                  }
                }
              ]
            },
            "menuLink": {
              "id": "1",
              "link": "teste",
              "text": "teste",
              "newTab": false
            },
            "footer": "texto para Footer"
          }
        }
      },
      "posts": {
        "data": [
          {
            "id": "1",
            "attributes": {
              "slug": "uma-biblioteca-java-script-para-criar-interfaces-de-usuario",
              "title": "Uma biblioteca JavaScript para criar interfaces de usuário",
              "excerpt": "React faz com que a criação de UIs interativas seja uma tarefa fácil",
              "content": "**Um Componente Simples**\nOs componentes do React implementam um método render() que recebe os dados de entrada e retornam o que deve ser exibido. Este exemplo usa uma sintaxe parecida com XML chamada JSX. Os dados de entrada que são passados para o componente podem ser acessados no render() via this.props.\n\nO JSX é opcional e não é necessário para usar o React. Teste o Babel REPL para ver o código JavaScript bruto produzido pela etapa de compilação do JSX.\n![Screenshot_1.png](https://res.cloudinary.com/dbc5pch0s/image/upload/v1672704964/Screenshot_1_eb452af53d.png)\n**\nUm Componente com Estado (stateful component)**\nAlém de receber dados de entrada (acessados via this.props), um componente pode manter dados do state interno (acessados via this.state). Quando os dados do state de um componente são alterados, o código renderizado será atualizado invocando o método render() novamente.\n![Screenshot_2.png](https://res.cloudinary.com/dbc5pch0s/image/upload/v1672705000/Screenshot_2_1e1ac66f9f.png)\n\n**Uma Aplicação**\nUsando props e state, nós podemos montar uma pequena aplicação de Lista de Tarefas. Este exemplo usa state para manter a lista atual de itens, bem como o texto que o usuário inseriu. Apesar de parecer que os event handlers são renderizados inline, eles serão coletados e implementados usando a delegação de eventos (event delegation).\n![Screenshot_3.png](https://res.cloudinary.com/dbc5pch0s/image/upload/v1672705000/Screenshot_3_564a698daf.png)\n\nUm Componente Usando Plugins Externos\nO React é flexível e facilita a interface com outras bibliotecas e frameworks. Este exemplo usa remarkable, uma biblioteca externa de Markdown, para converter o valor de uma <textarea> em tempo real.\n![Screenshot_4.png](https://res.cloudinary.com/dbc5pch0s/image/upload/v1672705000/Screenshot_4_2f50bd0bff.png)",
              "allowComments": true,
              "cover": {
                "data": [
                  {
                    "id": "7",
                    "attributes": {
                      "name": "logoR.png",
                      "alternativeText": null,
                      "url": "https://res.cloudinary.com/dbc5pch0s/image/upload/v1672705193/logo_R_1ddbc0e20b.png"
                    }
                  }
                ]
              },
              "categories": {
                "data": [
                  {
                    "id": "2",
                    "attributes": {
                      "displayName": "React",
                      "slug": "react"
                    }
                  }
                ]
              },
              "tags": {
                "data": [
                  {
                    "id": "2",
                    "attributes": {
                      "displayName": "useEffect",
                      "slug": "use-effet"
                    }
                  },
                  {
                    "id": "1",
                    "attributes": {
                      "displayName": "useState",
                      "slug": "use-state"
                    }
                  }
                ]
              },
              "author": {
                "data": {
                  "id": "1",
                  "attributes": {
                    "displayName": "Italo Silva",
                    "slug": "italo-silva"
                  }
                }
              }
            }
          },
          {
            "id": "2",
            "attributes": {
              "slug": "python",
              "title": "Python",
              "excerpt": " linguagem de programação de alto nível",
              "content": "Nota: Para outros significados, veja Python (desambiguação).\nPython\nLogo do Python\nParadigma\tMultiparadigma:\norientada a objetosimperativafuncional\nSurgido em\t20 de fevereiro de 1991 (31 anos)[1]\nÚltima versão\t3.11.0 (24 de outubro de 2022; há 2 meses[2])\nCriado por\tGuido van Rossum[1]\nEstilo de tipagem\t\ndinâmicaforteduckgradual (desde a versão 3.5)\nPrincipais implementações\t\nCPythonIronPythonJythonPyPyStackless\nInfluenciada por\t\nABC[3]ALGOL 68C[3]HaskellIconJavaLispModula-3[3]PerlSmalltalk\nInfluenciou\t\nBooCoffeeScriptDFantomGDScriptGoGroovyJavaScriptJuliaNimPyRubySquirrelSwift\nLicença:\tPython Software Foundation License[4]\nExtensão do arquivo:\t\n.py.pyc.pyd.pyo.pyw.pyz\nPágina oficial\twww.python.org\nPython é uma linguagem de programação de alto nível,[5] interpretada de script, imperativa, orientada a objetos, funcional, de tipagem dinâmica e forte. Foi lançada por Guido van Rossum em 1991.[1] Atualmente, possui um modelo de desenvolvimento comunitário, aberto e gerenciado pela organização sem fins lucrativos Python Software Foundation. Apesar de várias partes da linguagem possuírem padrões e especificações formais, a linguagem, como um todo, não é formalmente especificada. O padrão na pratica é a implementação CPython.\n\nA linguagem foi projetada com a filosofia de enfatizar a importância do esforço do programador sobre o esforço computacional. Prioriza a legibilidade do código sobre a velocidade ou expressividade. Combina uma sintaxe concisa e clara com os recursos poderosos de sua biblioteca padrão e por módulos e frameworks desenvolvidos por terceiros.\n\nPython é uma linguagem de propósito geral de alto nível, multiparadigma, suporta o paradigma orientado a objetos, imperativo, funcional e procedural. Possui tipagem dinâmica e uma de suas principais características é permitir a fácil leitura do código e exigir poucas linhas de código se comparado ao mesmo programa em outras linguagens. Devido às suas características, ela é utilizada, principalmente, para processamento de textos, dados científicos e criação de CGIs para páginas dinâmicas para a web. Foi considerada pelo público a 3ª linguagem \"mais amada\", de acordo com uma pesquisa conduzida pelo site Stack Overflow em 2018[6] e está entre as 5 linguagens mais populares, de acordo com uma pesquisa conduzida pela RedMonk.[7]\n\nO nome Python teve a sua origem no grupo humorístico britânico Monty Python,[8] criador do programa Monty Python's Flying Circus, embora muitas pessoas façam associação com o réptil do mesmo nome (em português, píton ou pitão).\n\nHistória\n\nGuido van Rossum, São Francisco, Califórnia\nO Python foi concebido no final de 1989[5][8] por Guido van Rossum no Instituto de Pesquisa Nacional para Matemática e Ciência da Computação (CWI), nos Países Baixos, como um sucessor da ABC capaz de tratar exceções e prover interface com o sistema operacional Amoeba[9] através de scripts. Também da CWI, a linguagem ABC era mais produtiva que C, ainda que com o custo do desempenho em tempo de execução. Mas ela não possuía funcionalidades importantes para a interação com o sistema operacional, uma necessidade do grupo. Um dos focos primordiais de Python era aumentar a produtividade do programador.[8]\n\nPython foi feita com base na linguagem ABC, possui parte da sintaxe derivada do C, compreensão de listas, funções anonimas e função map de Haskell. Os iteradores são baseados na Icon, tratamentos de exceção e módulos da Modula-3, expressões regulares de Perl.\n\nEm 1991, Guido publicou o código (nomeado versão 0.9.0) no grupo de discussão alt.sources.[1] Nessa versão já estavam presentes classes com herança, tratamento de exceções, funções e os tipos de dado nativos list, dict, str, e assim por diante. Também estava presente nessa versão um sistema de módulos emprestado do Modula-3. O modelo de exceções também lembrava muito o do Modula-3, com a adição da opção else clause.[9]Em 1994 foi formado o principal fórum de discussão do Python, comp.lang.python, um marco para o crescimento da base de usuários da linguagem.\n\nA versão 1.0 foi lançada em janeiro de 1994. Novas funcionalidades incluíam ferramentas para programação funcional como lambda, map, filter e reduce. A última versão enquanto Guido estava na CWI foi o Python 1.2. Em 1995, ele continuou o trabalho no CNRI em Reston, Estados Unidos, de onde lançou diversas versões. Na versão 1.4 a linguagem ganhou parâmetros nomeados (a capacidade de passar parâmetro pelo nome e não pela posição na lista de parâmetros) e suporte nativo a números complexos, assim como uma forma de encapsulamento.[10]\n\nAinda na CNRI, Guido lançou a iniciativa Computer Programming for Everybody (CP4E; literalmente, \"Programação de Computadores para Todos\"), que visava tornar a programação mais acessível, um projeto financiado pela DARPA.[11] Atualmente o CP4E encontra-se inativo.\n\nEm 2000, o time de desenvolvimento da linguagem se mudou para a BeOpen a fim de formar o time PythonLabs. A CNRI pediu que a versão 1.6 fosse lançada para marcar o fim de desenvolvimento da linguagem naquele local. O único lançamento na BeOpen foi o Python 2.0, e após o lançamento o grupo de desenvolvedores da PythonLabs agrupou-se na Digital Creations.\n\nPython 2.0 implementou list comprehension, uma relevante funcionalidade de linguagens funcionais como SETL e Haskell. A sintaxe da linguagem para essa construção é bastante similar a de Haskell, exceto pela preferência do Haskell por caracteres de pontuação e da preferência do python por palavras reservadas alfabéticas. Essa versão 2.0 também introduziu um sistema coletor de lixo capaz de identificar e tratar ciclos de referências.[12]\n\nJá o 1.6 incluiu uma licença CNRI substancialmente mais longa que a licença CWI que estavam usando nas versões anteriores. Entre outras mudanças, essa licença incluía uma cláusula atestando que a licença era governada pelas leis da Virgínia. A Free Software Foundation alegou que isso era incompatível com a GNU GPL. Tanto BeOpen quanto CNRI e FSF negociaram uma mudança na licença livre do Python que o tornaria compatível com a GPL. Python 1.6.1 é idêntico ao 1.6.0, exceto por pequenas correções de falhas e uma licença nova, compatível com a GPL.[13]\n\nPython 2.1 era parecido com as versões 1.6.1 e 2.0. Sua licença foi renomeada para Python Software Foundation License.[4] Todo código, documentação e especificação desde o lançamento da versão alfa da 2.1 é propriedade da Python Software Foundation (PSF), uma organização sem fins lucrativos fundada em 2001, um modelo tal qual da Apache Software Foundation.[13] O lançamento incluiu a mudança na especificação para suportar escopo aninhado, assim como outras linguagens com escopo estático.[14] Esta funcionalidade estava desativada por padrão, e somente foi requerida na versão 2.2.\n\nUma grande inovação da versão 2.2 foi a unificação dos tipos Python (escritos em C) e classes (escritas em Python) em somente uma hierarquia. Isto tornou o modelo de objetos do Python consistentemente orientado a objeto.[15] Também foi adicionado generator, inspirado em Icon.[16]\n\nO incremento da biblioteca padrão e as escolhas sintáticas foram fortemente influenciadas por Java em alguns casos: o pacote logging[17] introduzido na versão 2.3,[18] o analisador sintático SAX, introduzido na versão 2.0 e a sintaxe de decoradores que usa @,[19] adicionadas na versão 2.4.[20]\n\nEm 1 de outubro de 2008 foi lançada a versão 2.6, já visando a transição para a versão 3.0 da linguagem. Entre outras modificações, foram incluídas bibliotecas para multiprocessamento, JSON e E/S, além de uma nova forma de formatação de cadeias de caracteres.[21]\n\nAtualmente a linguagem é usada em diversas áreas, como servidores de aplicação e computação gráfica. Está disponível como linguagem de script em aplicações como OpenOffice (Python UNO Bridge), Blender e pode ser utilizada em procedimentos armazenados no sistema gerenciador de banco de dados PostgreSQL (PL/Python).\n\nA terceira versão da linguagem foi lançada em dezembro de 2008,[22] chamada Python 3.0 ou Python 3000. Com noticiado desde antes de seu lançamento,[23] houve quebra de compatibilidade com a família 2.x para corrigir falhas que foram descobertas neste padrão, e para limpar os excessos das versões anteriores.[8] A primeira versão alfa foi lançada em 31 de agosto de 2007, a segunda em 7 de dezembro do mesmo ano.\n\nMudanças da versão incluem a alteração da palavra reservada print, que passa a ser uma função, tornando mais fácil a utilização de uma versão alternativa da rotina. Em Python 2.6, isso já está disponível ao adicionar o código from __future__ import print_function.[24] Também, a mudança para Unicode de todas as cadeias de caracteres.[25]\n\nEm 2012, foi criado o Raspberry Pi, cujo nome foi baseado na linguagem Python. Uma das principais linguagens escolhidas é Python. Python influenciou várias linguagens, algumas delas foram Boo e Cobra, que usa a indentação como definição de bloco e Go, que se baseia nos princípios de desenvolvimento rápido de Python.\n\nAtualmente, Python é um dos componentes padrão de vários sistemas operacionais, entre eles estão a maioria das distribuições do Linux, AmigaOS 4, FreeBSD, NetBSD, OpenBSD e OS X. A linguagem se tornou a padrão no curso de ciências da computação do MIT em 2009\n\nFilosofia\nParte da cultura da linguagem gira ao redor de The Zen of Python, um poema que faz parte do documento \"PEP 20 (The Zen of Python)\",[26] escrito pelo programador em Python de longa data Tim Peters, descrevendo sumariamente a filosofia do Python. Entre os vinte princípios do poema, estão presentes:\n\nBonito é melhor que feio;\nExplícito é melhor que implícito;\nSimples é melhor que complexo;\nComplexo é melhor que complicado;\nLegibilidade faz diferença.\nPode-se vê-lo através de um easter egg do Python pelo comando:\n\n>>> import this\nSintaxe e semântica\nPython 3. The standard type hierarchy.png\nConstruções\nConstruções de Python incluem: estrutura de seleção (if, else, elif); estrutura de repetição (for, while), que itera por um container, capturando cada elemento em uma variável local dada; construção de classes (class); construção de sub-rotinas (def); construção de escopo (with), como por exemplo para adquirir um recurso.\n\nTipos de dado\nA tipagem de Python é forte, pois os valores e objetos têm tipos bem definidos e não sofrem coerções como em C ou Perl. São disponibilizados diversos tipos de dados nativos:\n\nTipo de dado\tDescrição\tExemplo da sintaxe\nbool\tBooleano\tTrue ou False\nint\tNúmero de precisão fixa, é transparentemente convertido para long caso não caiba em um int.\t42\n2147483648L\nfloat\tPonto flutuante\t3.1415927\ncomplex\tNúmero complexo\t3+2j\nlist\tLista heterogênea mutável\t[4.0, 'string', True]\ntuple\tTupla imutável\t(4.0, 'string', True)\nrange\tSequência de números imutável que pode ser transformada em lista\trange(10)\nrange(0, 10)\nrange(0, 10, 1)\nset, frozenset\tConjunto não ordenado, não contém elementos duplicados\t{4.0, 'string', True}\nfrozenset([4.0, 'string', True])\nstr, unicode\tUma cadeia de caracteres imutável\t'Wikipedia'\nu'Wikipedia'\nbytes, bytearray, memoryview\tSequência binária\tb'Wikipedia'\nbytearray(b'Wikipedia')\nmemoryview(b'Wikipedia')\ndict\tConjunto associativo\t{'key1': 1.0, 'key2': False}\nPython também permite a definição dos tipos de dados próprios, através de classes. Instâncias são construídas invocando a classe (FooClass()), e as classes são instância da classe type, o que permite metaprogramação e reflexão. Métodos são definidos como funções anexadas à classe, e a sintaxe instância.método(argumento) é um atalho para Classe.método(instância, argumento). Os métodos devem referenciar explicitamente a referência para o objeto incluindo o parâmetro self como o primeiro argumento do método.[27]\n\nAntes da versão 3.0, Python possuía dois tipos de classes: \"old-style\" e \"new-style\". Classes old-style foram eliminadas no Python 3.0, e todas são new-style. Em versões entre 2.2 e 3.0, ambos tipos de classes podiam ser usadas. A sintaxe de ambos estilos é a mesma, a diferença acaba sendo de onde objeto da classe é herdado, direta ou indiretamente (todas classes new-style herdam de object e são instancias de type). As classes new-styles nada mais são que tipos definidos pelo usuário.\n\nPalavras reservadas\nO Python 3 define as seguintes palavras reservadas:[28]\n\nFalse     None    True    and    as\nassert    break    class    continue\ndef    del    elif     else    except\nfinally    for    from    global    if\nimport    in    is    lambda    not\nnonlocal    or    pass    raise    try\nreturn    while    with    yield\nA versão 3.10.0 implementou a Structural Pattern Matching (Correspondência de Padrão Estrutural), semelhante ao Switch-Case de outras linguagens, assim como definido na PEP 634. Por isso as palavras match e case passarão a ser reservadas.\n\nOperadores\nOs operadores básicos de comparação como ==, <, >=, entre outros são usados em todos os tipos de dados, como números, cadeias de texto, listas e mapeamentos. Comparações em cadeia como a < b < c possuem o mesmo significado básico que na matemática: os termos são comparadas na ordem. É garantido que o processamento da expressão lógica irá terminar tão cedo o veredito seja claro, o princípio da avaliação mínima. Usando a expressão anterior, se a < b é falso, c não é avaliado.\n\nQuanto aos operadores lógicos, até Python 2.2 não havia o tipo de dado booleano. Em todas as versões da linguagem os operadores lógicos tratam \"\", 0, None, 0.0, [] e {} como falso, enquanto o restante é tratado como verdadeiro de modo geral. Na versão 2.2.1 as constantes True e False foram adicionadas (subclasses de 1 e 0 respectivamente). A comparação binária retorna uma das duas constantes acima.\n\nOs operadores booleanos and e or também seguem a avaliação mínima. Por exemplo, y == 0 or x/y > 100 nunca lançará a exceção de divisão por zero.\n\nInterpretador interativo\nO interpretador interativo é uma característica diferencial da linguagem, porque há a possibilidade de testar o código de um programa e receber o resultado em tempo real, antes de iniciar a compilação ou incluí-las nos programas. Por exemplo:\n\n>>> 1+1\n2\n>>>\n>>> a = 1+1\n>>> print a\n2\n>>> print(a)\n2\n>>>\nNota: A partir da versão 3.0, o comando print passou a ser uma função, sendo obrigatório o uso de parênteses.[29]",
              "allowComments": true,
              "cover": {
                "data": [
                  {
                    "id": "8",
                    "attributes": {
                      "name": "Python_logo_and_wordmark.svg.png",
                      "alternativeText": null,
                      "url": "https://res.cloudinary.com/dbc5pch0s/image/upload/v1672705496/Python_logo_and_wordmark_svg_a3488e3420.png"
                    }
                  }
                ]
              },
              "categories": {
                "data": [
                  {
                    "id": "3",
                    "attributes": {
                      "displayName": "Python",
                      "slug": "python"
                    }
                  }
                ]
              },
              "tags": {
                "data": [
                  {
                    "id": "3",
                    "attributes": {
                      "displayName": "Python",
                      "slug": "python"
                    }
                  }
                ]
              },
              "author": {
                "data": {
                  "id": "2",
                  "attributes": {
                    "displayName": "italo raniery",
                    "slug": "italo-raniery"
                  }
                }
              }
            }
          },
          {
            "id": "3",
            "attributes": {
              "slug": "java-script-1",
              "title": "JavaScript",
              "excerpt": " linguagem de programação interpretada estruturada",
              "content": "**JavaScript** (frequentemente abreviado como JS) é uma linguagem de programação interpretada estruturada, de script em alto nível com tipagem dinâmica fraca e multiparadigma (protótipos, orientado a objeto, imperativo e funcional).[2][3] Juntamente com HTML e CSS, o JavaScript é uma das três principais tecnologias da World Wide Web. JavaScript permite páginas da Web interativas e, portanto, é uma parte essencial dos aplicativos da web. A grande maioria dos sites usa, e todos os principais navegadores têm um mecanismo JavaScript dedicado para executá-lo.[4]\n\nÉ atualmente a principal linguagem para programação client-side em navegadores web. É também bastante utilizada do lado do servidor através de ambientes como o node.js.\n\nComo uma linguagem multiparadigma, o JavaScript suporta estilos de programação orientados a eventos, funcionais e imperativos (incluindo orientado a objetos e prototype-based), apresentando recursos como fechamentos (closures) e funções de alta ordem comumente indisponíveis em linguagens populares como Java e C++. Possui APIs para trabalhar com texto, matrizes, datas, expressões regulares e o DOM, mas a linguagem em si não inclui nenhuma E/S, como instalações de rede, armazenamento ou gráficos, contando com isso no ambiente host em que está embutido.\n\nFoi originalmente implementada como parte dos navegadores web para que scripts pudessem ser executados do lado do cliente e interagissem com o usuário sem a necessidade deste script passar pelo servidor, controlando o navegador, realizando comunicação assíncrona e alterando o conteúdo do documento exibido, porém os mecanismos JavaScript agora estão incorporados em muitos outros tipos de software host, incluindo em servidores e bancos de dados da Web e em programas que não são da Web, como processadores de texto e PDF, e em tempo de execução ambientes que disponibilizam JavaScript para escrever aplicativos móveis e de desktop, incluindo widgets de área de trabalho.\n\nOs termos Vanilla JavaScript e Vanilla JS se referem ao JavaScript não estendido por qualquer estrutura ou biblioteca adicional. Scripts escritos em Vanilla JS são códigos JavaScript simples.[5][6]\n\nEmbora existam semelhanças entre JavaScript e Java, incluindo o nome da linguagem, a sintaxe e as respectivas bibliotecas padrão, as duas linguagens são distintas e diferem muito no design; JavaScript foi influenciado por linguagens de programação como Self e Scheme.[7]\n\nÉ baseada em ECMAScript, padronizada pela Ecma international nas especificações ECMA-262[8] e ISO/IEC 16262.\n\n**História**\nInício no Netscape\nEm 1993, o Centro Nacional de Aplicações de Supercomputação (NCSA), uma unidade da Universidade de Illinois em Urbana-Champaign, lançou o NCSA Mosaic, o primeiro navegador gráfico popular da Web, que desempenhou um papel importante na expansão do crescimento da nascente World Wide Web além do nicho NeXTSTEP onde a World Wide Web havia se formado três anos antes. Em 1994, uma empresa chamada Mosaic Communications foi fundada em Mountain View, na Califórnia, e empregou muitos dos autores originais do NCSA Mosaic para criar o Mosaic Netscape. No entanto, não compartilhou intencionalmente nenhum código com o NCSA Mosaic. O codinome interno do navegador da empresa era Mozilla, uma junção de \"Mosaic and Godzilla\". A primeira versão do navegador da Web, Mosaic Netscape 0.9, foi lançada no final de 1994. Em quatro meses, já havia conquistado três quartos do mercado de navegadores e se tornado o principal navegador da Web nos anos 90. Para evitar problemas de propriedade de marca registrada com o NCSA, o navegador foi posteriormente renomeado para Netscape Navigator no mesmo ano, e a empresa assumiu o nome de Netscape Communications. A Netscape Communications percebeu que a Web precisava se tornar mais dinâmica. Marc Andreessen, o fundador da empresa, acreditava que o HTML precisava de uma \"linguagem de cola\" que fosse fácil de usar por Web designers e programadores de meio período para montar componentes como imagens e plugins, onde o código poderia ser escrito diretamente na Web.[9]\n\nEm 1995, a Netscape Communications recrutou Brendan Eich com o objetivo de incorporar a linguagem de programação Scheme em seu Netscape Navigator.[10] Antes que ele pudesse começar, a Netscape Communications colaborou com a Sun Microsystems para incluir na linguagem de programação mais estática do Netscape Navigator Sun, Java, a fim de competir com a Microsoft pela adoção de tecnologias e plataformas da Web.[11] A Netscape Communications decidiu então que a linguagem de script que eles queriam criar complementaria o Java e deveria ter uma sintaxe semelhante, o que excluía a adoção de outras linguagens como Perl, Python, TCL ou Scheme. Para defender a ideia do JavaScript contra propostas concorrentes, a empresa precisava de um protótipo. Eich escreveu um em 10 dias, em maio de 1995.\n\nEmbora tenha sido desenvolvido sob o nome Mocha, a linguagem foi oficialmente chamada de LiveScript quando foi lançada em versões beta do Netscape Navigator 2.0 em setembro de 1995, mas foi renomeada para JavaScript[12] quando foi lançada no Netscape Navigator 2.0 beta 3 Dezembro.[13] A escolha final do nome causou confusão, dando a impressão de que a linguagem era uma derivação da linguagem de programação Java, e a escolha foi caracterizada como uma manobra de marketing da Netscape para dar ao JavaScript o status da linguagem da moda, o Java.\n\nHá um equívoco comum de que o JavaScript foi influenciado por uma linguagem de script de página da Web desenvolvida pelo Nombas chamada Cmm (não confundir com o C posteriormente - criado em 1997).[14] Brendan Eich, no entanto, nunca tinha ouvido falar de Cmm antes de criar o LiveScript.[15] Os Nombas lançaram seus scripts de página da Web incorporados no Netscape, embora o script de página da Web não fosse um conceito novo, conforme mostrado pelo navegador da Web ViolaWWW. Nombas mais tarde passou a oferecer JavaScript em vez de Cmm em seu produto ScriptEase e fazia parte do grupo TC39 que padronizava o ECMAScript.[16]\n\nJavaScript Back-end\nEm dezembro de 1995, logo depois de lançar o JavaScript para navegadores, a Netscape introduziu uma implementação da linguagem para scripting server-side com o Netscape Enterprise Server.[17]\n\nDesde 1996, o servidor da Web do IIS tem suportado a implementação do JavaScript - JScript do lado do servidor - em páginas ASP e .NET.[18]\n\nDesde meados da década de 2000, foram introduzidas implementações adicionais de JavaScript no lado do servidor, como o Node.js em 2009.[19]\n\nO TypeScript é uma linguagem de programação que adiciona tipagem ao JavaScript, sendo popular para uso no back-end.[20]\n\n**Adoção pela Microsoft**\nAs tecnologias de script da Microsoft, incluindo VBScript e JScript, foram lançadas em 1996. JScript, uma implementação de engenharia reversa do JavaScript da Netscape, fazia parte do Internet Explorer 3. O JScript também estava disponível para scripts do servidor no Internet Information Server. O Internet Explorer 3 também incluiu o primeiro suporte da Microsoft para CSS e várias extensões para HTML, mas em cada caso a implementação era visivelmente diferente daquela encontrada no Netscape Navigator na época.[21] Essas diferenças tornaram difícil para os designers e programadores fazerem um único site funcionar bem em ambos os navegadores, levando ao uso dos logotipos \"melhor visualizado no Netscape\" e \"melhor visualizado no Internet Explorer\" que caracterizaram esses primeiros anos de guerras de navegadores. O JavaScript começou a adquirir a reputação de ser um dos obstáculos a uma Web de plataforma cruzada e baseada em padrões. Alguns desenvolvedores assumiram a difícil tarefa de tentar fazer com que seus sites funcionassem em ambos os principais navegadores, mas muitos não podiam arcar com o tempo.[21] Com o lançamento do Internet Explorer 4, a Microsoft introduziu o conceito de HTML Dinâmico, mas as diferenças nas implementações de linguagem e nos diferentes e proprietários Modelos de Objeto de Documento permaneceram e foram obstáculos à adoção generalizada de JavaScript na Web.\n\nPadronização\nEm novembro de 1996, a Netscape submeteu o JavaScript à ECMA International para criar uma especificação padrão, que outros fornecedores de navegador poderiam implementar com base no trabalho feito na Netscape. Isso levou ao lançamento oficial da especificação de linguagem ECMAScript publicada na primeira edição da norma ECMA-262 em junho de 1997, sendo o JavaScript a mais conhecida das implementações. ActionScript e JScript eram outras implementações bem conhecidas do ECMAScript.\n\nO lançamento do ECMAScript 2 em junho de 1998 deu continuidade ao ciclo de processo de padrões, conforme algumas modificações do padrão internacional ISO / IEC 16262. ECMAScript 3 foi lançado em dezembro de 1999 e é a linha de base moderna para JavaScript. O trabalho original do ECMAScript 4 liderado por Waldemar Horwat (então na Netscape, agora no Google) começou em 2000. A Microsoft inicialmente participou e implementou algumas propostas em sua linguagem JScript .NET.\n\nCom o tempo, ficou claro que a Microsoft não tinha intenção de cooperar ou implementar o JavaScript adequado no Internet Explorer, mesmo que eles não tivessem uma proposta concorrente e tivessem uma implementação parcial (e divergente neste ponto) no lado do servidor .NET. Então, em 2003, o trabalho original do ECMAScript 4 foi desativado.\n\nO próximo grande evento foi em 2005, com dois grandes acontecimentos na história do JavaScript. Primeiro, Brendan Eich e Mozilla juntaram-se novamente à Ecma International como um membro sem fins lucrativos e começaram a trabalhar no ECMAScript para XML (E4X), o padrão ECMA-357, que veio de ex-funcionários da Microsoft na BEA Systems (originalmente adquirida como Crossgain) . Isso levou a trabalhar em conjunto com a Macromedia (posteriormente adquirida pela Adobe Systems), que estava implementando o E4X no ActionScript 3 (o ActionScript 3 era um fork do ECMAScript 4 original).\n\nAssim, juntamente com a Macromedia, o trabalho foi reiniciado no ECMAScript 4 com o objetivo de padronizar o que estava no ActionScript 3. Para isso, a Adobe Systems lançou a ActionScript Virtual Machine 2, codinome Tamarin, como um projeto de código aberto. Mas Tamarin e ActionScript 3 eram muito diferentes do JavaScript da web para convergir, como foi realizado pelas partes em 2007 e 2008.\n\nAinda havia turbulência entre os vários jogadores; Douglas Crockford — então no Yahoo! — juntou forças com a Microsoft em 2007 para se opor ao ECMAScript 4, o que levou ao esforço do ECMAScript 3.1. O desenvolvimento do ECMAScript 4 nunca foi concluído, mas esse trabalho influenciou versões subsequentes.\n\nEnquanto tudo isso acontecia, as comunidades de código aberto e de desenvolvedores começaram a trabalhar para revolucionar o que poderia ser feito com JavaScript. Esse esforço da comunidade surgiu em 2005, quando Jesse James Garrett lançou um white paper no qual cunhou o termo Ajax e descreveu um conjunto de tecnologias, das quais o JavaScript era o backbone, usado para criar aplicativos da Web onde os dados podem ser carregados em segundo plano, evitando a necessidade de recargas de páginas completas e levando a aplicativos mais dinâmicos. Isso resultou em um período de renascimento do uso do JavaScript liderado pelas bibliotecas de código aberto e pelas comunidades que se formaram em torno delas, com bibliotecas como Prototype, jQuery, Dojo Toolkit, MooTools e outras.\n\nEm julho de 2008, os diferentes partidos de ambos os lados se reuniram em Oslo. Isso levou ao eventual acordo no início de 2009 para renomear o ECMAScript 3.1 para o ECMAScript 5 e impulsionar o idioma usando uma agenda que é conhecida como Harmonia. O ECMAScript 5 foi finalmente lançado em dezembro de 2009.\n\nEm junho de 2011, o ECMAScript 5.1 foi lançado para se alinhar totalmente com a terceira edição do padrão internacional ISO / IEC 16262. O ECMAScript 2015 foi lançado em junho de 2015. O ECMAScript 2016 foi lançado em junho de 2016. A versão atual é o ECMAScript 2017, lançado em junho de 2017.\n\n**Desenvolvimentos posteriores**\nJavaScript tornou-se uma das linguagens de programação mais populares da web. No entanto, muitos programadores profissionais inicialmente desacreditaram a linguagem devido ao público-alvo percebido de autores da Web e outros \"amadores\".[22] O advento do Ajax devolveu o JavaScript aos holofotes e atraiu mais atenção da programação profissional. O resultado foi a proliferação de estruturas e bibliotecas abrangentes, práticas de programação JavaScript aprimoradas e aumento do uso de JavaScript fora dos navegadores da Web, conforme observado pela proliferação de plataformas JavaScript do lado do servidor.\n\nEm janeiro de 2009, o projeto CommonJS foi fundado com o objetivo de especificar uma biblioteca padrão comum principalmente para o desenvolvimento de JavaScript fora do navegador.[23]\n\nCom o surgimento de aplicativos de página única e sites pesados em JavaScript, ele está sendo cada vez mais usado como um alvo de compilação para compiladores de origem para origem de linguagens dinâmicas e estáticas.\n\nMarca comercial\n\"JavaScript\" é uma marca comercial da Oracle Corporation nos Estados Unidos.[24] Ele é usado sob licença para tecnologia inventada e implementada pela Netscape Communications e entidades atuais, como a Fundação Mozilla.[25]\n\nCaracterísticas\nAs seguintes características são comuns a todas as implementações em conformidade com o ECMAScript, a menos que esteja explicitamente especificado ao contrário.\n\nSuporte universal\nTodos os navegadores da Web modernos e populares suportam JavaScript com interpretadores integrados.\n\nImperativa e Estruturada\nJavaScript suporta os elementos de sintaxe de programação estruturada da linguagem C como, por exemplo, if, while, switch. Uma exceção é a questão do escopo: o escopo em blocos ao estilo do C não é suportado. Em seu lugar, JavaScript utiliza escopo a nível de função. JavaScript 1.7, entretanto, suporta escopo a nível de bloco através do comando let. Como C, JavaScript faz distinção entre expressões e comandos. Uma diferença sintática do C é que a quebra de linha termina automaticamente o comando, sendo o ponto-e-vírgula opcional ao fim de uma instrução.\n\n**Dinâmica**\nTipagem dinâmica\nComo na maioria das linguagens de script, tipos são associados com valores, não com variáveis. Por exemplo, a variável x poderia ser associada a um número e mais tarde associada a uma ''string''. JavaScript suporta várias formas de testar o tipo de um objeto, incluindo duck typing.\n\n**Baseada em objetos**\nJavaScript é quase inteiramente baseada em objetos[carece de fontes]. Objetos JavaScript são arrays associativos, aumentados com protótipos. Os nomes da propriedade de um objeto são strings: obj.x = 10 e obj[\"x\"] = 10 são equivalentes, o ponto neste exemplo é apenas sintático. Propriedades e seus valores podem ser adicionadas, mudadas, ou deletadas em tempo de execução. A maioria das propriedades de um objeto (e aqueles em sua cadeia de herança via protótipo) pode ser enumerada usando-se uma estrutura de repetição for...in. JavaScript possui um pequeno número de objetos padrão da linguagem como window e document.\n\nAvaliação em tempo de execução\nJavaScript inclui a função eval que consegue executar em tempo de execução comandos da linguagem que estejam escritos em uma string.\n\nFuncional\nFunções de primeira classe\nNo JavaScript, as funções são de primeira classe, isto é, são objetos que possuem propriedades e métodos, e podem ser passados como argumentos, serem atribuídos a variáveis ou retornados como qualquer outro objeto.\n\n**Funções aninhadas**\nFunções 'internas' ou 'aninhadas' são funções definidas dentro de outras funções. São criadas cada vez que a função que as contém (externa) é invocada. Além disso, o escopo da função externa, incluindo constantes, variáveis locais e valores de argumento, se transforma parte do estado interno de cada objeto criado a partir da função interna, mesmo depois que a execução da função interna é concluída.\n\n**Fechamentos**\nJavaScript permite que funções aninhadas sejam criadas com o escopo léxico no momento de sua definição e possui o operador () para invocá-las em outro momento. Essa combinação de código que pode ser executado fora do escopo no qual foi definido, com seu próprio escopo durante a execução, é denominada, dentro da ciência da computação, fechamento.",
              "allowComments": true,
              "cover": {
                "data": [
                  {
                    "id": "9",
                    "attributes": {
                      "name": "800px-JavaScript-logo.png",
                      "alternativeText": null,
                      "url": "https://res.cloudinary.com/dbc5pch0s/image/upload/v1672775243/800px_Java_Script_logo_ecfc92a188.png"
                    }
                  }
                ]
              },
              "categories": {
                "data": [
                  {
                    "id": "1",
                    "attributes": {
                      "displayName": "JavaScript",
                      "slug": "java-script"
                    }
                  }
                ]
              },
              "tags": {
                "data": [
                  {
                    "id": "4",
                    "attributes": {
                      "displayName": "js",
                      "slug": "js"
                    }
                  }
                ]
              },
              "author": {
                "data": {
                  "id": "1",
                  "attributes": {
                    "displayName": "Italo Silva",
                    "slug": "italo-silva"
                  }
                }
              }
            }
          }
        ]
      }
    }
  }